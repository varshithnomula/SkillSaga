import { ListResponseStreamEventTypeOut } from "../models/listResponseStreamEventTypeOut";
import { Ordering } from "../models/ordering";
import { StreamEventTypeIn } from "../models/streamEventTypeIn";
import { StreamEventTypeOut } from "../models/streamEventTypeOut";
import { StreamEventTypePatch } from "../models/streamEventTypePatch";
import { SvixRequestContext } from "../request";
export interface StreamEventTypeListOptions {
    limit?: number;
    iterator?: string | null;
    order?: Ordering;
}
export interface StreamEventTypeCreateOptions {
    idempotencyKey?: string;
}
export declare class StreamEventType {
    private readonly requestCtx;
    constructor(requestCtx: SvixRequestContext);
    list(options?: StreamEventTypeListOptions): Promise<ListResponseStreamEventTypeOut>;
    create(streamEventTypeIn: StreamEventTypeIn, options?: StreamEventTypeCreateOptions): Promise<StreamEventTypeOut>;
    get(name: string): Promise<StreamEventTypeOut>;
    update(name: string, streamEventTypeIn: StreamEventTypeIn): Promise<StreamEventTypeOut>;
    delete(name: string): Promise<void>;
    patch(name: string, streamEventTypePatch: StreamEventTypePatch): Promise<StreamEventTypeOut>;
}
