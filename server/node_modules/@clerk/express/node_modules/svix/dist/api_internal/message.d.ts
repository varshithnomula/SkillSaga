import { MessageEventsOut } from "../models/messageEventsOut";
import { MessageIn } from "../models/messageIn";
import { MessagePrecheckIn } from "../models/messagePrecheckIn";
import { MessagePrecheckOut } from "../models/messagePrecheckOut";
import { MessageRawPayloadOut } from "../models/messageRawPayloadOut";
import { SvixRequestContext } from "../request";
export interface MessageEventsOptions {
    limit?: number;
    iterator?: string | null;
    eventTypes?: string[];
    channels?: string[];
    after?: Date | null;
}
export interface MessagePrecheckOptions {
    idempotencyKey?: string;
}
export declare class Message {
    private readonly requestCtx;
    constructor(requestCtx: SvixRequestContext);
    events(appId: string, options?: MessageEventsOptions): Promise<MessageEventsOut>;
    precheck(appId: string, messagePrecheckIn: MessagePrecheckIn, options?: MessagePrecheckOptions): Promise<MessagePrecheckOut>;
    getRawPayload(appId: string, msgId: string): Promise<MessageRawPayloadOut>;
}
export declare function messageInRaw(eventType: string, payload: string, contentType?: string): MessageIn;
