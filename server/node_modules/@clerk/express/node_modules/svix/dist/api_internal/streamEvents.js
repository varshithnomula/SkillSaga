"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StreamEvents = void 0;
const createStreamIn_1 = require("../models/createStreamIn");
const createStreamOut_1 = require("../models/createStreamOut");
const eventStreamOut_1 = require("../models/eventStreamOut");
const request_1 = require("../request");
class StreamEvents {
    constructor(requestCtx) {
        this.requestCtx = requestCtx;
    }
    get(streamId, options) {
        const request = new request_1.SvixRequest(request_1.HttpMethod.GET, "/api/v1/stream/{stream_id}/events");
        request.setPathParam("stream_id", streamId);
        request.setQueryParam("limit", options === null || options === void 0 ? void 0 : options.limit);
        request.setQueryParam("iterator", options === null || options === void 0 ? void 0 : options.iterator);
        request.setQueryParam("after", options === null || options === void 0 ? void 0 : options.after);
        return request.send(this.requestCtx, eventStreamOut_1.EventStreamOutSerializer._fromJsonObject);
    }
    create(streamId, createStreamIn, options) {
        const request = new request_1.SvixRequest(request_1.HttpMethod.POST, "/api/v1/stream/{stream_id}/events");
        request.setPathParam("stream_id", streamId);
        request.setHeaderParam("idempotency-key", options === null || options === void 0 ? void 0 : options.idempotencyKey);
        request.setBody(createStreamIn_1.CreateStreamInSerializer._toJsonObject(createStreamIn));
        return request.send(this.requestCtx, createStreamOut_1.CreateStreamOutSerializer._fromJsonObject);
    }
}
exports.StreamEvents = StreamEvents;
//# sourceMappingURL=streamEvents.js.map