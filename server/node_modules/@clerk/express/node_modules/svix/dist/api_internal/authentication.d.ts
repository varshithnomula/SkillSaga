import { ApiTokenOut } from "../models/apiTokenOut";
import { AppPortalAccessOut } from "../models/appPortalAccessOut";
import { CreateTokenIn } from "../models/createTokenIn";
import { OneTimeTokenIn } from "../models/oneTimeTokenIn";
import { OneTimeTokenOut } from "../models/oneTimeTokenOut";
import { RotatePollerTokenIn } from "../models/rotatePollerTokenIn";
import { StreamPortalAccessIn } from "../models/streamPortalAccessIn";
import { SvixRequestContext } from "../request";
export interface AuthenticationCreateMessageTokenOptions {
    idempotencyKey?: string;
}
export interface AuthenticationRotatePollerTokenOptions {
    idempotencyKey?: string;
}
export interface AuthenticationExchangeOneTimeTokenOptions {
    idempotencyKey?: string;
}
export interface AuthenticationStreamPortalAccessOptions {
    idempotencyKey?: string;
}
export interface AuthenticationDashboardAccessOptions {
    idempotencyKey?: string;
}
export declare class Authentication {
    private readonly requestCtx;
    constructor(requestCtx: SvixRequestContext);
    createMessageToken(appId: string, createTokenIn: CreateTokenIn, options?: AuthenticationCreateMessageTokenOptions): Promise<ApiTokenOut>;
    getPollerToken(appId: string, endpointId: string): Promise<ApiTokenOut>;
    rotatePollerToken(appId: string, endpointId: string, rotatePollerTokenIn: RotatePollerTokenIn, options?: AuthenticationRotatePollerTokenOptions): Promise<ApiTokenOut>;
    exchangeOneTimeToken(oneTimeTokenIn: OneTimeTokenIn, options?: AuthenticationExchangeOneTimeTokenOptions): Promise<OneTimeTokenOut>;
    streamPortalAccess(streamId: string, streamPortalAccessIn: StreamPortalAccessIn, options?: AuthenticationStreamPortalAccessOptions): Promise<AppPortalAccessOut>;
}
