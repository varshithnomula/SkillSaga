import { ListResponseStreamOut } from "../models/listResponseStreamOut";
import { Ordering } from "../models/ordering";
import { StreamIn } from "../models/streamIn";
import { StreamOut } from "../models/streamOut";
import { StreamPatch } from "../models/streamPatch";
import { SvixRequestContext } from "../request";
export interface StreamStreamListOptions {
    limit?: number;
    iterator?: string | null;
    order?: Ordering;
}
export interface StreamStreamCreateOptions {
    idempotencyKey?: string;
}
export declare class StreamStream {
    private readonly requestCtx;
    constructor(requestCtx: SvixRequestContext);
    list(options?: StreamStreamListOptions): Promise<ListResponseStreamOut>;
    create(streamIn: StreamIn, options?: StreamStreamCreateOptions): Promise<StreamOut>;
    get(streamId: string): Promise<StreamOut>;
    update(streamId: string, streamIn: StreamIn): Promise<StreamOut>;
    delete(streamId: string): Promise<void>;
    patch(streamId: string, streamPatch: StreamPatch): Promise<StreamOut>;
}
