import { IncomingWebhookPayloadOut } from "../models/incomingWebhookPayloadOut";
import { OAuthPayloadIn } from "../models/oAuthPayloadIn";
import { OAuthPayloadOut } from "../models/oAuthPayloadOut";
import { SvixRequestContext } from "../request";
export interface BetaConnectorOauthDiscordOptions {
    idempotencyKey?: string;
}
export interface BetaConnectorOauthHubspotOptions {
    idempotencyKey?: string;
}
export interface BetaConnectorOauthSlackOptions {
    idempotencyKey?: string;
}
export declare class BetaConnectorOauth {
    private readonly requestCtx;
    constructor(requestCtx: SvixRequestContext);
    discord(oAuthPayloadIn: OAuthPayloadIn, options?: BetaConnectorOauthDiscordOptions): Promise<IncomingWebhookPayloadOut>;
    hubspot(oAuthPayloadIn: OAuthPayloadIn, options?: BetaConnectorOauthHubspotOptions): Promise<OAuthPayloadOut>;
    slack(oAuthPayloadIn: OAuthPayloadIn, options?: BetaConnectorOauthSlackOptions): Promise<IncomingWebhookPayloadOut>;
}
