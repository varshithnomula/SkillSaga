"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.messageInRaw = exports.Message = void 0;
const messageEventsOut_1 = require("../models/messageEventsOut");
const messagePrecheckIn_1 = require("../models/messagePrecheckIn");
const messagePrecheckOut_1 = require("../models/messagePrecheckOut");
const messageRawPayloadOut_1 = require("../models/messageRawPayloadOut");
const request_1 = require("../request");
class Message {
    constructor(requestCtx) {
        this.requestCtx = requestCtx;
    }
    events(appId, options) {
        const request = new request_1.SvixRequest(request_1.HttpMethod.GET, "/api/v1/app/{app_id}/events");
        request.setPathParam("app_id", appId);
        request.setQueryParam("limit", options === null || options === void 0 ? void 0 : options.limit);
        request.setQueryParam("iterator", options === null || options === void 0 ? void 0 : options.iterator);
        request.setQueryParam("event_types", options === null || options === void 0 ? void 0 : options.eventTypes);
        request.setQueryParam("channels", options === null || options === void 0 ? void 0 : options.channels);
        request.setQueryParam("after", options === null || options === void 0 ? void 0 : options.after);
        return request.send(this.requestCtx, messageEventsOut_1.MessageEventsOutSerializer._fromJsonObject);
    }
    precheck(appId, messagePrecheckIn, options) {
        const request = new request_1.SvixRequest(request_1.HttpMethod.POST, "/api/v1/app/{app_id}/msg/precheck/active");
        request.setPathParam("app_id", appId);
        request.setHeaderParam("idempotency-key", options === null || options === void 0 ? void 0 : options.idempotencyKey);
        request.setBody(messagePrecheckIn_1.MessagePrecheckInSerializer._toJsonObject(messagePrecheckIn));
        return request.send(this.requestCtx, messagePrecheckOut_1.MessagePrecheckOutSerializer._fromJsonObject);
    }
    getRawPayload(appId, msgId) {
        const request = new request_1.SvixRequest(request_1.HttpMethod.GET, "/api/v1/app/{app_id}/msg/{msg_id}/raw");
        request.setPathParam("app_id", appId);
        request.setPathParam("msg_id", msgId);
        return request.send(this.requestCtx, messageRawPayloadOut_1.MessageRawPayloadOutSerializer._fromJsonObject);
    }
}
exports.Message = Message;
function messageInRaw(eventType, payload, contentType) {
    const headers = contentType ? { "content-type": contentType } : undefined;
    return {
        eventType,
        payload: {},
        transformationsParams: {
            rawPayload: payload,
            headers,
        },
    };
}
exports.messageInRaw = messageInRaw;
//# sourceMappingURL=message.js.map