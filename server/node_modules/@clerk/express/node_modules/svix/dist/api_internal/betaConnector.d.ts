import { ConnectorIn } from "../models/connectorIn";
import { ConnectorOut } from "../models/connectorOut";
import { ConnectorPatch } from "../models/connectorPatch";
import { GenerateIn } from "../models/generateIn";
import { GenerateOut } from "../models/generateOut";
import { ListResponseConnectorOut } from "../models/listResponseConnectorOut";
import { Ordering } from "../models/ordering";
import { TemplateUpdate } from "../models/templateUpdate";
import { TransformationSimulateIn } from "../models/transformationSimulateIn";
import { TransformationSimulateOut } from "../models/transformationSimulateOut";
import { SvixRequestContext } from "../request";
import { BetaConnectorOauth } from "./betaConnectorOauth";
export interface BetaConnectorListOptions {
    limit?: number;
    iterator?: string | null;
    order?: Ordering;
}
export interface BetaConnectorCreateOptions {
    idempotencyKey?: string;
}
export interface BetaConnectorGenerateOptions {
    idempotencyKey?: string;
}
export interface BetaConnectorSimulateOptions {
    idempotencyKey?: string;
}
export declare class BetaConnector {
    private readonly requestCtx;
    constructor(requestCtx: SvixRequestContext);
    get oauth(): BetaConnectorOauth;
    list(options?: BetaConnectorListOptions): Promise<ListResponseConnectorOut>;
    create(connectorIn: ConnectorIn, options?: BetaConnectorCreateOptions): Promise<ConnectorOut>;
    generate(generateIn: GenerateIn, options?: BetaConnectorGenerateOptions): Promise<GenerateOut>;
    simulate(transformationSimulateIn: TransformationSimulateIn, options?: BetaConnectorSimulateOptions): Promise<TransformationSimulateOut>;
    get(transformationTemplateId: string): Promise<ConnectorOut>;
    update(transformationTemplateId: string, templateUpdate: TemplateUpdate): Promise<ConnectorOut>;
    delete(transformationTemplateId: string): Promise<void>;
    patch(transformationTemplateId: string, connectorPatch: ConnectorPatch): Promise<ConnectorOut>;
}
