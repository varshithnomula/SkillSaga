"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BetaConnectorOauth = void 0;
const incomingWebhookPayloadOut_1 = require("../models/incomingWebhookPayloadOut");
const oAuthPayloadIn_1 = require("../models/oAuthPayloadIn");
const oAuthPayloadOut_1 = require("../models/oAuthPayloadOut");
const request_1 = require("../request");
class BetaConnectorOauth {
    constructor(requestCtx) {
        this.requestCtx = requestCtx;
    }
    discord(oAuthPayloadIn, options) {
        const request = new request_1.SvixRequest(request_1.HttpMethod.POST, "/api/v1/transformation-template/oauth/discord");
        request.setHeaderParam("idempotency-key", options === null || options === void 0 ? void 0 : options.idempotencyKey);
        request.setBody(oAuthPayloadIn_1.OAuthPayloadInSerializer._toJsonObject(oAuthPayloadIn));
        return request.send(this.requestCtx, incomingWebhookPayloadOut_1.IncomingWebhookPayloadOutSerializer._fromJsonObject);
    }
    hubspot(oAuthPayloadIn, options) {
        const request = new request_1.SvixRequest(request_1.HttpMethod.POST, "/api/v1/transformation-template/oauth/hubspot");
        request.setHeaderParam("idempotency-key", options === null || options === void 0 ? void 0 : options.idempotencyKey);
        request.setBody(oAuthPayloadIn_1.OAuthPayloadInSerializer._toJsonObject(oAuthPayloadIn));
        return request.send(this.requestCtx, oAuthPayloadOut_1.OAuthPayloadOutSerializer._fromJsonObject);
    }
    slack(oAuthPayloadIn, options) {
        const request = new request_1.SvixRequest(request_1.HttpMethod.POST, "/api/v1/transformation-template/oauth/slack");
        request.setHeaderParam("idempotency-key", options === null || options === void 0 ? void 0 : options.idempotencyKey);
        request.setBody(oAuthPayloadIn_1.OAuthPayloadInSerializer._toJsonObject(oAuthPayloadIn));
        return request.send(this.requestCtx, incomingWebhookPayloadOut_1.IncomingWebhookPayloadOutSerializer._fromJsonObject);
    }
}
exports.BetaConnectorOauth = BetaConnectorOauth;
//# sourceMappingURL=betaConnectorOauth.js.map