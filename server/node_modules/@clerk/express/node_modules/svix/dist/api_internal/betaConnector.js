"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BetaConnector = void 0;
const connectorIn_1 = require("../models/connectorIn");
const connectorOut_1 = require("../models/connectorOut");
const connectorPatch_1 = require("../models/connectorPatch");
const generateIn_1 = require("../models/generateIn");
const generateOut_1 = require("../models/generateOut");
const listResponseConnectorOut_1 = require("../models/listResponseConnectorOut");
const templateUpdate_1 = require("../models/templateUpdate");
const transformationSimulateIn_1 = require("../models/transformationSimulateIn");
const transformationSimulateOut_1 = require("../models/transformationSimulateOut");
const request_1 = require("../request");
const betaConnectorOauth_1 = require("./betaConnectorOauth");
class BetaConnector {
    constructor(requestCtx) {
        this.requestCtx = requestCtx;
    }
    get oauth() {
        return new betaConnectorOauth_1.BetaConnectorOauth(this.requestCtx);
    }
    list(options) {
        const request = new request_1.SvixRequest(request_1.HttpMethod.GET, "/api/v1/transformation-template");
        request.setQueryParam("limit", options === null || options === void 0 ? void 0 : options.limit);
        request.setQueryParam("iterator", options === null || options === void 0 ? void 0 : options.iterator);
        request.setQueryParam("order", options === null || options === void 0 ? void 0 : options.order);
        return request.send(this.requestCtx, listResponseConnectorOut_1.ListResponseConnectorOutSerializer._fromJsonObject);
    }
    create(connectorIn, options) {
        const request = new request_1.SvixRequest(request_1.HttpMethod.POST, "/api/v1/transformation-template");
        request.setHeaderParam("idempotency-key", options === null || options === void 0 ? void 0 : options.idempotencyKey);
        request.setBody(connectorIn_1.ConnectorInSerializer._toJsonObject(connectorIn));
        return request.send(this.requestCtx, connectorOut_1.ConnectorOutSerializer._fromJsonObject);
    }
    generate(generateIn, options) {
        const request = new request_1.SvixRequest(request_1.HttpMethod.POST, "/api/v1/transformation-template/generate");
        request.setHeaderParam("idempotency-key", options === null || options === void 0 ? void 0 : options.idempotencyKey);
        request.setBody(generateIn_1.GenerateInSerializer._toJsonObject(generateIn));
        return request.send(this.requestCtx, generateOut_1.GenerateOutSerializer._fromJsonObject);
    }
    simulate(transformationSimulateIn, options) {
        const request = new request_1.SvixRequest(request_1.HttpMethod.POST, "/api/v1/transformation-template/simulate");
        request.setHeaderParam("idempotency-key", options === null || options === void 0 ? void 0 : options.idempotencyKey);
        request.setBody(transformationSimulateIn_1.TransformationSimulateInSerializer._toJsonObject(transformationSimulateIn));
        return request.send(this.requestCtx, transformationSimulateOut_1.TransformationSimulateOutSerializer._fromJsonObject);
    }
    get(transformationTemplateId) {
        const request = new request_1.SvixRequest(request_1.HttpMethod.GET, "/api/v1/transformation-template/{transformation_template_id}");
        request.setPathParam("transformation_template_id", transformationTemplateId);
        return request.send(this.requestCtx, connectorOut_1.ConnectorOutSerializer._fromJsonObject);
    }
    update(transformationTemplateId, templateUpdate) {
        const request = new request_1.SvixRequest(request_1.HttpMethod.PUT, "/api/v1/transformation-template/{transformation_template_id}");
        request.setPathParam("transformation_template_id", transformationTemplateId);
        request.setBody(templateUpdate_1.TemplateUpdateSerializer._toJsonObject(templateUpdate));
        return request.send(this.requestCtx, connectorOut_1.ConnectorOutSerializer._fromJsonObject);
    }
    delete(transformationTemplateId) {
        const request = new request_1.SvixRequest(request_1.HttpMethod.DELETE, "/api/v1/transformation-template/{transformation_template_id}");
        request.setPathParam("transformation_template_id", transformationTemplateId);
        return request.sendNoResponseBody(this.requestCtx);
    }
    patch(transformationTemplateId, connectorPatch) {
        const request = new request_1.SvixRequest(request_1.HttpMethod.PATCH, "/api/v1/transformation-template/{transformation_template_id}");
        request.setPathParam("transformation_template_id", transformationTemplateId);
        request.setBody(connectorPatch_1.ConnectorPatchSerializer._toJsonObject(connectorPatch));
        return request.send(this.requestCtx, connectorOut_1.ConnectorOutSerializer._fromJsonObject);
    }
}
exports.BetaConnector = BetaConnector;
//# sourceMappingURL=betaConnector.js.map