import { EndpointMtlsConfigIn } from "../models/endpointMtlsConfigIn";
import { EndpointMtlsConfigOut } from "../models/endpointMtlsConfigOut";
import { EndpointOauthConfigIn } from "../models/endpointOauthConfigIn";
import { EndpointOauthConfigOut } from "../models/endpointOauthConfigOut";
import { EndpointTransformationSimulateIn } from "../models/endpointTransformationSimulateIn";
import { EndpointTransformationSimulateOut } from "../models/endpointTransformationSimulateOut";
import { HubspotOauthConfigIn } from "../models/hubspotOauthConfigIn";
import { SvixRequestContext } from "../request";
export interface EndpointTransformationSimulateOptions {
    idempotencyKey?: string;
}
export declare class Endpoint {
    private readonly requestCtx;
    constructor(requestCtx: SvixRequestContext);
    getMtlsConfig(appId: string, endpointId: string): Promise<EndpointMtlsConfigOut>;
    updateMtlsConfig(appId: string, endpointId: string, endpointMtlsConfigIn: EndpointMtlsConfigIn): Promise<void>;
    deleteMtlsConfig(appId: string, endpointId: string): Promise<void>;
    getOauthConfig(appId: string, endpointId: string): Promise<EndpointOauthConfigOut>;
    updateOauthConfig(appId: string, endpointId: string, endpointOauthConfigIn: EndpointOauthConfigIn): Promise<void>;
    deleteOauthConfig(appId: string, endpointId: string): Promise<void>;
    updateHubspotOauthConfig(appId: string, endpointId: string, hubspotOauthConfigIn: HubspotOauthConfigIn): Promise<void>;
    transformationSimulate(appId: string, endpointId: string, endpointTransformationSimulateIn: EndpointTransformationSimulateIn, options?: EndpointTransformationSimulateOptions): Promise<EndpointTransformationSimulateOut>;
}
