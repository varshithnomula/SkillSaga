"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Authentication = void 0;
const apiTokenOut_1 = require("../models/apiTokenOut");
const appPortalAccessOut_1 = require("../models/appPortalAccessOut");
const createTokenIn_1 = require("../models/createTokenIn");
const oneTimeTokenIn_1 = require("../models/oneTimeTokenIn");
const oneTimeTokenOut_1 = require("../models/oneTimeTokenOut");
const rotatePollerTokenIn_1 = require("../models/rotatePollerTokenIn");
const streamPortalAccessIn_1 = require("../models/streamPortalAccessIn");
const request_1 = require("../request");
class Authentication {
    constructor(requestCtx) {
        this.requestCtx = requestCtx;
    }
    createMessageToken(appId, createTokenIn, options) {
        const request = new request_1.SvixRequest(request_1.HttpMethod.POST, "/api/v1/auth/app/{app_id}/create-message-token");
        request.setPathParam("app_id", appId);
        request.setHeaderParam("idempotency-key", options === null || options === void 0 ? void 0 : options.idempotencyKey);
        request.setBody(createTokenIn_1.CreateTokenInSerializer._toJsonObject(createTokenIn));
        return request.send(this.requestCtx, apiTokenOut_1.ApiTokenOutSerializer._fromJsonObject);
    }
    getPollerToken(appId, endpointId) {
        const request = new request_1.SvixRequest(request_1.HttpMethod.GET, "/api/v1/auth/app/{app_id}/poller/{endpoint_id}/token");
        request.setPathParam("app_id", appId);
        request.setPathParam("endpoint_id", endpointId);
        return request.send(this.requestCtx, apiTokenOut_1.ApiTokenOutSerializer._fromJsonObject);
    }
    rotatePollerToken(appId, endpointId, rotatePollerTokenIn, options) {
        const request = new request_1.SvixRequest(request_1.HttpMethod.POST, "/api/v1/auth/app/{app_id}/poller/{endpoint_id}/token/rotate");
        request.setPathParam("app_id", appId);
        request.setPathParam("endpoint_id", endpointId);
        request.setHeaderParam("idempotency-key", options === null || options === void 0 ? void 0 : options.idempotencyKey);
        request.setBody(rotatePollerTokenIn_1.RotatePollerTokenInSerializer._toJsonObject(rotatePollerTokenIn));
        return request.send(this.requestCtx, apiTokenOut_1.ApiTokenOutSerializer._fromJsonObject);
    }
    exchangeOneTimeToken(oneTimeTokenIn, options) {
        const request = new request_1.SvixRequest(request_1.HttpMethod.POST, "/api/v1/auth/one-time-token");
        request.setHeaderParam("idempotency-key", options === null || options === void 0 ? void 0 : options.idempotencyKey);
        request.setBody(oneTimeTokenIn_1.OneTimeTokenInSerializer._toJsonObject(oneTimeTokenIn));
        return request.send(this.requestCtx, oneTimeTokenOut_1.OneTimeTokenOutSerializer._fromJsonObject);
    }
    streamPortalAccess(streamId, streamPortalAccessIn, options) {
        const request = new request_1.SvixRequest(request_1.HttpMethod.POST, "/api/v1/auth/stream-portal-access/{stream_id}");
        request.setPathParam("stream_id", streamId);
        request.setHeaderParam("idempotency-key", options === null || options === void 0 ? void 0 : options.idempotencyKey);
        request.setBody(streamPortalAccessIn_1.StreamPortalAccessInSerializer._toJsonObject(streamPortalAccessIn));
        return request.send(this.requestCtx, appPortalAccessOut_1.AppPortalAccessOutSerializer._fromJsonObject);
    }
}
exports.Authentication = Authentication;
//# sourceMappingURL=authentication.js.map