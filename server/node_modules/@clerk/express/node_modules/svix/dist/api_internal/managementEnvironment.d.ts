import { EnvironmentModelIn } from "../models/environmentModelIn";
import { EnvironmentModelOut } from "../models/environmentModelOut";
import { EnvironmentModelUpdate } from "../models/environmentModelUpdate";
import { ListResponseEnvironmentModelOut } from "../models/listResponseEnvironmentModelOut";
import { Ordering } from "../models/ordering";
import { SvixRequestContext } from "../request";
export interface ManagementEnvironmentListOptions {
    limit?: number;
    iterator?: string | null;
    order?: Ordering;
}
export interface ManagementEnvironmentCreateOptions {
    idempotencyKey?: string;
}
export declare class ManagementEnvironment {
    private readonly requestCtx;
    constructor(requestCtx: SvixRequestContext);
    list(options?: ManagementEnvironmentListOptions): Promise<ListResponseEnvironmentModelOut>;
    create(environmentModelIn: EnvironmentModelIn, options?: ManagementEnvironmentCreateOptions): Promise<EnvironmentModelOut>;
    get(envId: string): Promise<EnvironmentModelOut>;
    update(envId: string, environmentModelUpdate: EnvironmentModelUpdate): Promise<EnvironmentModelOut>;
    delete(envId: string): Promise<void>;
}
